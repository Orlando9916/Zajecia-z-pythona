#1- find_max
# Funkcja find max
# Czy lista jest pusta?
# Jeśli tak zwróc zero
# Jeśli nie, zapisz pierwszy element jako najwiekszy i sprawdź czy kolejny element jest wiekszy od poprzedniego
# Jesli tak nadpisz najwieksza wartosc, jesli nie przejdz do kolejnej liczby i powtarzaj powyzsza czynnosc az do momentu kiedy lista będzie pusta

def find_max(lista):
    if len(lista) == 0:
        return None

    def sprawdz_elementy(lista, max_wartosc):
        if len(lista) == 0:
            return max_wartosc

        aktualna_wartosc = lista[0]
        if aktualna_wartosc > max_wartosc:
            max_wartosc = aktualna_wartosc

        return sprawdz_elementy(lista[1:], max_wartosc)

    return sprawdz_elementy(lista[1:], lista[0])

moja_lista = [5, 10, 15, 8, 20]
maks_wartosc = find_max(moja_lista)
print("Maksymalna wartość w liście:", maks_wartosc)

#2- sum_of_list
#funkcja sum_of_list
# Czy lista jest pusta?
# Jeśli tak zwróc zero
# Jeśli nie, weź pierwszy element z listy i wpisz go w sume, następnie sprawdź czy lista ma kolejne elementy
# Jesli tak, usuń pierwszy element i powtóz powyższą czynność
def sum_of_list(lst):
    if not lst:  
        return 0
    
    first_element = lst[0]  
    remaining_list = lst[1:]  

    return first_element + sum_of_list(remaining_list)  

my_list = [1, 6, 3, 4, 5]
result = sum_of_list(my_list)
print("Suma wartości w liście:", result) 

# 3- n_silnia
# funkcja n_silnia
# Jeśli liczba jest mniejsza bądź równa 1, zwróć 1
# Jeśli nie, zwróć liczba * silnia(liczba - 1)
def silnia(liczba):
    if liczba <= 1:
        return 1
    else:
        return liczba * silnia(liczba - 1)

num = 6
result = silnia(num)
print(f"Silnia liczby {num} wynosi: {result}")

#4- ciag_fibonacciego
# funkcja ciag_fibonacciego
# Podajemy liczbę, według której gnerowane są kolejne liczby ciągu fibonacciego
# dla liczby = 8 ciąg fibonacciego wynosi [ 1	1	2	3	5	8	13	21]
# dla liczby = 10 ciąg fibonacciego wynosi [ 1	1	2	3	5	8	13	21	34	55]
def ciag_fibonacci(n):
    if n <= 0:
        return []
    elif n == 1:
        return [0]
    elif n == 2:
        return [0, 1]
    else:
        fib_seq = ciag_fibonacci(n - 1)
        fib_seq.append(fib_seq[-1] + fib_seq[-2])
        return fib_seq


num = 8
fibonacci_sequence = ciag_fibonacci(num)
print(f"Ciąg Fibonacciego o {num} elementach: {fibonacci_sequence}")

